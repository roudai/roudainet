(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{340:function(n,_,v){"use strict";v.r(_);var L=v(26),component=Object(L.a)({},(function(){this._self._c;return this._m(0)}),[function(){var n=this,_=n._self._c;return _("div",{staticClass:"content m-2"},[_("h2",[n._v("ルービックキューブ目隠しの解法")]),n._v(" "),_("p",[n._v("\n    ルービックキューブを目隠しで解く方法は、普通に解くのに最も一般的な「CFOP法」（LBL法）とは、根本的に全く異なる解法を用います。\n  ")]),n._v(" "),_("p",[n._v("\n    そのため、極端に言ってしまえば、目隠しで解くためには普通に解けるという事は必須事項ではありません。しかし、回し慣れていることは必要ですので、必然的にほとんどの人が普通に解くことから始めると思います（中には、目隠しで解くのは日本トップレベルでも普通に解くには中級レベル、という人もいます）。\n  ")]),n._v(" "),_("h2",[n._v("目隠し解法の基本")]),n._v(" "),_("p",[n._v("\n    いわゆるスピード解法と言われるCFOP法では、ルービックキューブを揃える課程を、Cross、F2L、OLL、PLLと細かいステップに分け、それぞれの課程で手順を回して揃えます。\n  ")]),n._v(" "),_("p",[n._v("\n    この方法では、F2Lが終わった時点でキューブを見てOLLを判断、手順を回し、OLLが終わった時点でキューブを見てPLLを判断、手順を回す、といった具合に、各ステップが終わるごとにキューブを見て、どのパターンに当てはまるかを判断し、その手順を回します。\n  ")]),n._v(" "),_("p",[n._v("\n    F2Lが完全に終わる前にどのOLLになるかを判断するいわゆる「先読み」といったテクニックはありますが、例えばOLLを始める前にPLLが何かを完全に判断できる人はおそらくいません。\n  ")]),n._v(" "),_("p",[n._v("\n    ましてや、最初からCROSS、F2L、OLL、PLLをすべて読み切って解くなんていう芸当は、まず不可能です。そこで、ルービックキューブを目隠しをして揃えるためには、\n    "),_("ul",[_("li",[n._v("各パーツ（エッジ・コーナーそれぞれ）が、どこにいけば良いか（揃えることができるか）を覚える")]),n._v(" "),_("li",[n._v("目的のパーツ（通常3つセット）以外を動かさないようにパーツを移動する")])]),n._v("\n    という方法で揃えていきます。解法はすべとエッジパートとコーナーパートに分けられ、その組み合わせが目隠しの解法となります。 \n  ")]),n._v(" "),_("h2",[n._v("各種解法")]),n._v(" "),_("h3",[n._v("EOEP + COCP")]),n._v(" "),_("p",[n._v("\n    エッジ・コーナーそれぞれを、まず向きを合わせ(Edge(Corner) Orientation)、その後場所を合わせる(Edge(Corner) Permutation)というものです。ルービックキューブを目隠しで揃えるということが世界に広まったときに、最初に提案されたのがこの方法です。\n  ")]),n._v(" "),_("p",[n._v("\n    この解法は、考え方自体が分かりやすい、覚える手順が少なくて済むといった利点はありますが、記憶時に向き、場所を別々に覚えるため、\n    "),_("ul",[_("li",[n._v("最低でも同じパーツを2巡して記憶する必要がある。")]),n._v(" "),_("li",[n._v("ステップが多いため、手数が多くなる。")])]),n._v("\n    といったデメリットがあり、今の時代に目隠しを始めるにおいて、この解法を選ぶ理由は全くありません。\n  ")]),n._v(" "),_("p",[n._v("\n    しかし、場所移動のない単純なEO・COの手順は次に述べる解法でも有用になる場合も多いため、その解法自体を知っていることは大きな利点になります。\n  ")]),n._v(" "),_("h3",[n._v("M2 + R2")]),n._v(" "),_("p",[n._v("\n    Stefan Pochmannが2007に提唱した解法です("),_("a",{attrs:{href:"https://www.stefan-pochmann.info/spocc/blindsolving/M2R2/"}},[n._v("M2/R2 blindcubing methods")]),n._v(")。\n  ")]),n._v(" "),_("p",[n._v("\n    EOEP + COCPと違い、現在主流となっている向きと位置を同時に揃える方法の基礎となった解法です。エッジをM2法、コーナーをR2法と言われる方法で揃えます。必要な手順も少なく、目隠しで解くのに問題となるパリティ処理も簡単で、非常に優れた解法です。\n  ")]),n._v(" "),_("p",[n._v("\n    しかし、特にR2法については例外パターンが多く、手順を覚えるのが少し大変です。\n  ")]),n._v(" "),_("h3",[n._v("M2 + COCP")]),n._v(" "),_("p",[n._v("\n    エッジをM2法で、コーナーをCOCP法で解く、ハイブリッド方式です。コーナーをCOCPで解くデメリットはありますが、比較的分かりやすい解法のため、一時スタンダードな解法とされていました。\n    ")]),n._v(" "),_("p",[n._v("\n    しかし、やはり目隠し競技のスピード化に伴い、COCPは今では推奨されません。\n  ")]),n._v(" "),_("h3",[n._v("M2 + Old Pochmann （おすすめ！）")]),n._v(" "),_("p",[n._v("\n    エッジをM2法で、コーナーをOld Pochmann法で解く方法です。BLDを始めるにおいて、もっともスタンダードと言って良い方法です。\n  ")]),n._v(" "),_("p",[n._v("\n    Old Pochmann法は、前述のR2法よりも前にStefan Pochmannが提案したものですが、覚える手順がほとんどなく、またM2法と組み合わせることでパリティ（後述）の処理も簡単にすることができます。\n  ")]),n._v(" "),_("h3",[n._v("3cycle")]),n._v(" "),_("p",[n._v("\n    目隠し競技で国内・世界トップレベル（具体的には記憶時間込みで50秒未満程度）を目指すのであれば、必須である解法です。\n  ")]),n._v(" "),_("p",[n._v("\n    しかし、手順が非常に多い（エッジ・コーナー合わせて500以上（！））ことから、習得が難しく、いきなりここから始めるのはおすすめできません。\n    しかし、コミュテーターという概念を理解すれば手順すべてを丸暗記する必要もないことから、習得をしている人からすれば、言われるほど難しいものではないという人もいます。\n\n  ")]),_("h2",[n._v("パリティとは")]),n._v(" "),_("p",[n._v("\n    目隠しで解くうえで、「パリティ」という言葉が必ずでてきます。\n  ")]),n._v(" "),_("p",[n._v("\n    「目隠し解法の基本」の中で、エッジ・コーナーをそれぞれパーツを動かして揃えていくと説明しました。ルービックキューブがある程度解ける人なら理解していることと思いますが、ルービックキューブでは「3つのパーツだけの交換」は可能（PLLでのU-Perm、A-Perm等）ですが、「2つのパーツだけの交換」は不可能です。\n  ")]),n._v(" "),_("p",[n._v("\n    しかし、エッジの3点交換をしていくと、最終的に2つのエッジの交換だけが残ることがあります。その状態のことを、「パリティがある」といいます。\n  ")]),n._v(" "),_("p",[n._v("\n    では不可能であるはずの2点交換をどのように解消するかというと、エッジに2点交換が残る場合には、コーナーにも必ず2点交換が残ります。そして、エッジ2点＋コーナー2点の交換であれば、これは可能です（PLLでのJ-Perm、Y-Perm等）。\n  ")]),n._v(" "),_("p",[n._v("\n    パリティがあるかないかの確率は完全に五分五分ですので、このパリティ処理をどのように行うかは、目隠しで解くうえでとても重要な要素になります。\n  ")])])}],!1,null,null,null);_.default=component.exports}}]);